		[[ ARRAY ]]

TYPE NAME[LENGTH] // Static Array

		[[ CONTAINER ]]

CONT.empty()           // Return true if empty
CONT.clear()           // Clear Container
CONT.swap(<CONTENEUR>) // Swap content from 2 Containers
ARRAY_VARIABLE.size()  // Return Container Size

Declaration : CONTAINER_TYPE<TYPE> NAME
			  CONTAINER_TYPE<TYPE> NAME(LENGTH[, VALUE])

------- vector -------

 - Elements stored side by side
 - Optimize for adding element at the end
 - Indexed by Integers

.push_back() // Add element at the end
.pop_back()  // Erase last element
.front()     // Return to first index
.back()      // Return to last index
.assign()    // Replace all element with new ones

------- deque -------

 - Elements stored side by side
 - Optimize for adding element in the beginning and the end
 - Indexed by Integers

.push_back()  // Add element at the end
.pop_back()   // Erase last element
.push_front() // Add element int the beginning
.pop_front()  // Erase first element
.front()      // Return to first index
.back()       // Return to last index
.assign()     // Replace all element with new ones

------- list -------

 - Elements stores randomly in the memory
 - Can only be browse with iterators
 - Optimize for adding element in the middle

------- stack -------

Add, Erase and Access to the last element added

.push() // Add element at the end
.top()  // Return to last index
.pop()  // Erase last element

------- queue -------

Add element at the end and Erase and Access to the first one add

.push()   // Add element at the end
.front()  // Return to first index
.pop()    // Erase first element

------- priority_queue -------

A queue which sort its elements (The TYPE must have the operator <)

------- map -------

 - Indexed by any Type
 - Elements sorted by the index (Key's Type must have the operator <)
 - Can only be browse with iterators

map<TYPE_KEY, TYPE> NAME // Declaration

------- set -------

 - Elements sorted (The TYPE must have the operator <)
 - Can only be browse with iterators

------- multiset et multimap -------

Similar to set and map where KEYS can be duplicated

		[[ ITERATOR ]]

CONTAINER_TYPE<TYPE>::iterator ITERATOR // Declaration

CONTAINER.begin() // Return iterator to the beginning of the CONTAINER
CONTAINER.end()   // Return iterator to the end of the CONTAINER

.insert() // Add element after pointed element
.erase()  // Erase pointed element