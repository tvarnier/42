		[[ AFFICHAGE ]]

cout >> // Display
cin <<  // Read
endl    // Endl and reset

getline(<flux>, <string variable>) // Get lign
cin.ignore()                       // Clear cin flux

		[[ FILES ]]

ofstream FLUX                                 // Create write flux
ofstream FLUX(<string FILE_PATH>[, MODE])     // Create and open write flux from FILE_PATH
								 , ios::app ) // Open at the end of the file
FLUX << // Write on the flux

ifstream FLUX                     // Create read flux
ifstream FLUX(<string FILE_PATH>) // Create and open read flux from FILE_PATH
FLUX.get(<char VARIABLE>)        // Read char by char
NAME >>                          // Read word by word
getline(NAME, <string VARIABLE>) // Read line by line

FLUX.open(<string FILE_PATH>) // Open a file
FLUX.close()                  // Close a file

FLUX.tellp() // Return cursor position [ofstream]
FLUX.tellg() // Return cursor position [ifstream]

FLUX.seekp(NBR, POSITION) // Move cursor [ofstream]
FLUX.seekg(NBR, POSITION) // Move cursor [ifstream]
				POSITION : ios::beg (debut), ios::end (fin), ios::cur (actuel)

		[[ ITERATOR ]]

-- WRITE --

ostream_iterator<TYPE> NAME(<FLUX>[, <string SEPARATOR>])
	-> *NAME = VAlUE // VALUE will be written on FLUX

-- READ --

istream_iterator<TYPE> IT(<FLUX>)
	-> VARIABLE = *IT // READ value from FLUX

istream_iterator<TYPE> END // equal to end-of-stream

		[[ ALGORITHM ]]

copy(IT, END, <FLUX>) // Copy content of FLUX to FLUX

back_insert_iterator<CONTAINER<TYPE>> IT(<CONTAINER>) // ITERATOR that extend CONTAINER if necessary

